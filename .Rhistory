open_excel_sheets(mcar_data)
open_excel_sheets(original_data)
#load necessary libraries
library(ggplot2)
library(dplyr)
library(tidyr)
library(tidyverse)
library(openxlsx)
library(readxl)
library(zoo) #for interpolation
library(purrr)
#load whole data
mcar_data <- "/Users/marcinebessire/Desktop/Master_Thesis/FAO_MCAR_patient_visit_sep.xlsx"
original_data <- "/Users/marcinebessire/Desktop/Master_Thesis/FAO_original_patient_visit_sep.xlsx"
#load necessary libraries
library(ggplot2)
library(dplyr)
library(tidyr)
library(tidyverse)
library(openxlsx)
library(readxl)
library(zoo) #for interpolation
library(purrr)
#load whole data
mcar_data <- "/Users/marcinebessire/Desktop/Master_Thesis/FAO_MCAR_patient_visit_sep.xlsx"
original_data <- "/Users/marcinebessire/Desktop/Master_Thesis/FAO_original_patient_visit_sep.xlsx"
#interpolation function
interpolate_mcar <- function(df){
time <- df$Time_min
#metaa data
metadata <- c("ID", "Patient", "Date", "Time_min", "Visit")
metabolite_cols <- setdiff(names(df), metadata)
#interpolate each metabolite column
df[metabolite_cols] <- lapply(df[metabolite_cols], function(col) {
na.approx(col, x = time, na.rm = FALSE) #linear interpolation, values filled based on time spacing
})
return(df)
}
#trapezoidal AUC
compute_auc <- function(df){
time <- df$Time_min
metadata <- c("ID", "Patient", "Date", "Time_min", "Visit")
metabolite_cols <- setdiff(names(df), metadata)
auc <- sapply(metabolite_cols, function(metabolite) {
conc <- df[[metabolite]]
valid <- !is.na(time) & !is.na(conc)
if (sum(valid) < 2) return(NA) #if not enough data
sum(diff(time[valid]) * (head(conc[valid], -1) + tail(conc[valid], -1)) / 2)
})
return(auc)
}
#function to process all sheets
process_all_sheets <- function(dataset, apply_interpolation = TRUE) {
sheet_names <- excel_sheets(dataset)
#empty list
auc_list <- list()
for (sheet in sheet_names){
df <- read_excel(dataset, sheet = sheet)
#only interpolate if there are missing values
if (apply_interpolation) {
df <- interpolate_mcar(df)
}
auc_values <- compute_auc(df)
auc_list[[sheet]] <- auc_values
}
return(auc_list)
}
#call function to process sheets
auc_mcar <- process_all_sheets(mcar_data, apply_interpolation = TRUE)
auc_original <- process_all_sheets(original_data, apply_interpolation = FALSE)
sheet_names <- intersect(names(auc_list1), names(auc_list2))
#compare now the auc results
compare_auc <- function(auc_list1, auc_list2){
sheet_names <- intersect(names(auc_list1), names(auc_list2))
comparison_df <- bind_rows(
lapply(sheet_names, function(sheet) {
auc1 <- auc_list1[[sheet]]
auc2 <- auc_list2[[sheet]]
common_metabolites <- intersect(names(auc1), names(auc2))
data.frame(
Sheet = sheet,
Metabolite = common_metabolites,
AUC_MCAR = unname(auc1[common_metabolites]),
AUC_Original = unname(auc2[common_metabolites]),
Relative_Difference = unname(auc1[common_metabolites] - auc2[common_metabolites] / auc2[common_metabolites])
)
}),
.id = "Index"
)
return(comparison_df)
}
#call comparison function
auc_comparison <- compare_auc(auc_mcar, auc_original)
View(auc_comparison)
#compare now the auc results
compare_auc <- function(auc_list1, auc_list2){
sheet_names <- intersect(names(auc_list1), names(auc_list2))
comparison_df <- bind_rows(
lapply(sheet_names, function(sheet) {
auc1 <- auc_list1[[sheet]]
auc2 <- auc_list2[[sheet]]
common_metabolites <- intersect(names(auc1), names(auc2))
auc_mcar_vals <- unname(auc1[common_metabolites])
auc_orig_vals <- unname(auc2[common_metabolites])
#compute difference
diff_vals <- auc_mcar_vals - auc_orig_vals
#compute relative difference s(afely )handle division by 0
rel_diff <- ifelse(
is.na(auc_orig_vals) | auc_orig_vals == 0,
NA,
(diff_vals / auc_orig_vals) * 100
)
data.frame(
Sheet = sheet,
Metabolite = common_metabolites,
AUC_MCAR = auc_mcar_vals,
AUC_Original = auc_orig_vals,
Absolute_Diff = diff_vals,
Relative_Diff_Percent = rel_diff
)
}),
.id = "Index"
)
return(comparison_df)
}
#call comparison function
auc_comparison <- compare_auc(auc_mcar, auc_original)
View(auc_comparison)
#call comparison function
auc_comparison <- compare_auc(auc_mcar, auc_original)
library(stringr)
#compare now the auc results
compare_auc <- function(auc_list1, auc_list2){
sheet_names <- intersect(names(auc_list1), names(auc_list2))
comparison_df <- bind_rows(
lapply(sheet_names, function(sheet) {
auc1 <- auc_list1[[sheet]]
auc2 <- auc_list2[[sheet]]
common_metabolites <- intersect(names(auc1), names(auc2))
auc_mcar_vals <- unname(auc1[common_metabolites])
auc_orig_vals <- unname(auc2[common_metabolites])
#compute difference
diff_vals <- auc_mcar_vals - auc_orig_vals
#compute relative difference s(afely )handle division by 0
rel_diff <- ifelse(
is.na(auc_orig_vals) | auc_orig_vals == 0,
NA,
(diff_vals / auc_orig_vals) * 100
)
data.frame(
Sheet = sheet,
Metabolite = common_metabolites,
AUC_MCAR = auc_mcar_vals,
AUC_Original = auc_orig_vals,
Absolute_Diff = diff_vals,
Relative_Diff_Percent = rel_diff
)
})
)
return(comparison_df)
}
#call comparison function
auc_comparison <- compare_auc(auc_mcar, auc_original)
View(auc_comparison)
View(auc_comparison)
#extract patient and visit from sheet
auc_comparison <- auc_comparison %>%
mutate(
Patient = str_extract(Sheet, "p\\d+"),
Visit = str_extract(Sheet, "v\\d+")
Group = "MCAR_vs_Original"
#extract patient and visit from sheet
auc_comparison <- auc_comparison %>%
mutate(
Patient = str_extract(Sheet, "p\\d+"),
Visit = str_extract(Sheet, "v\\d+"),
Group = "MCAR_vs_Original"
)
View(auc_comparison)
auc_long <- auc_comparison %>%
select(Patient, Visit, Metabolite, AUC_MCAR, AUC_Original) %>%
pivot_longer(
cols = c(AUC_MCAR, AUC_Original),
names_to = "Type",
values_to = "AUC"
) %>%
mutate(Type = recode(Type, AUC_MCAR = "MCAR", AUC_Original = "Original"))
ggplot(auc_long, aes(x = Type, y = AUC, fill = Type)) +
geom_boxplot(alpha = 0.7, outlier.shape = NA) +
facet_grid(Patient ~ Visit, scales = "free_y") +
labs(
title = "AUC Distribution: MCAR vs Original",
x = "Data Type",
y = "Area Under Curve (AUC)"
) +
theme_minimal() +
theme(legend.position = "none")
#now make density plot
ggplot(auc_long, aes(x = AUC, fill = Type, color = Type)) +
geom_density(alpha = 0.4, adjust = 1.2) +
facet_grid(Patient ~ Visit, scales = "free") +
labs(
title = "Density Distribution of AUCs: MCAR vs Original",
x = "Area Under Curve (AUC)",
y = "Density"
) +
theme_minimal() +
theme(
strip.text = element_text(face = "bold"),
legend.title = element_blank()
)
#Make density plot
prepare_density_data <- function(file_path_mcar, file_path_orig) {
sheets <- intersect(excel_sheets(file_path_mcar), excel_sheets(file_path_orig))
all_data <- purrr::map_dfr(sheets, function(sheet) {
df_mcar <- read_excel(file_path_mcar, sheet = sheet)
df_orig <- read_excel(file_path_orig, sheet = sheet)
# Interpolate MCAR only if it has NAs
if (anyNA(df_mcar)) df_mcar <- interpolate_mcar(df_mcar)
# Define metadata
metadata <- c("ID", "Patient", "Date", "Time_min", "Visit")
metabolite_cols <- setdiff(names(df_mcar), metadata)
# Add sheet-based Patient and Visit info
patient <- str_extract(sheet, "p\\d+")
visit <- str_extract(sheet, "v\\d+")
df_mcar_long <- df_mcar %>%
select(Time_min, all_of(metabolite_cols)) %>%
pivot_longer(-Time_min, names_to = "Metabolite", values_to = "Value") %>%
mutate(Source = "MCAR", Patient = patient, Visit = visit)
df_orig_long <- df_orig %>%
select(Time_min, all_of(metabolite_cols)) %>%
pivot_longer(-Time_min, names_to = "Metabolite", values_to = "Value") %>%
mutate(Source = "Original", Patient = patient, Visit = visit)
bind_rows(df_mcar_long, df_orig_long)
})
return(all_data)
}
density_data <- prepare_density_data(mcar_data, original_data)
ggplot(density_data, aes(x = Value, fill = Source, color = Source)) +
geom_density(alpha = 0.4, adjust = 1.2, na.rm = TRUE) +
facet_grid(Patient ~ Visit, scales = "free") +
labs(
title = "Density Distribution of Metabolite Values: MCAR vs Original",
x = "Metabolite Value",
y = "Density"
) +
theme_minimal() +
theme(
strip.text = element_text(face = "bold"),
legend.title = element_blank()
)
ggplot(density_data, aes(x = Value, fill = Source, color = Source)) +
geom_density(alpha = 0.4, adjust = 1.2, na.rm = TRUE) +
facet_grid(Patient ~ Visit, scales = "free") +
labs(
title = "Density Distribution of Metabolite Values: MCAR vs Original",
x = "Metabolite Value",
y = "Density"
) +
theme_minimal() +
theme(
strip.text = element_text(face = "bold"),
legend.title = element_blank()
) +
xlim(-10,200)
ggplot(density_data, aes(x = Value, fill = Source, color = Source)) +
geom_density(alpha = 0.4, adjust = 1.2, na.rm = TRUE) +
facet_grid(Patient ~ Visit, scales = "free") +
labs(
title = "Density Distribution of Metabolite Values: MCAR vs Original",
x = "Metabolite Value",
y = "Density"
) +
theme_minimal() +
theme(
strip.text = element_text(face = "bold"),
legend.title = element_blank()
) +
xlim(-100,200)
ggplot(density_data, aes(x = Value, fill = Source, color = Source)) +
geom_density(alpha = 0.4, adjust = 1.2, na.rm = TRUE) +
facet_grid(Patient ~ Visit, scales = "free") +
labs(
title = "Density Distribution of Metabolite Values: MCAR vs Original",
x = "Metabolite Value",
y = "Density"
) +
theme_minimal() +
theme(
strip.text = element_text(face = "bold"),
legend.title = element_blank()
) +
xlim(-20,200)
ggplot(density_data, aes(x = Value, fill = Source, color = Source)) +
geom_density(alpha = 0.4, adjust = 1.2, na.rm = TRUE) +
facet_grid(Patient ~ Visit, scales = "free") +
labs(
title = "Density Distribution of Metabolite Values: MCAR vs Original",
x = "Metabolite Value",
y = "Density"
) +
theme_minimal() +
theme(
strip.text = element_text(face = "bold"),
legend.title = element_blank()
) +
xlim(-50,200)
source("~/Desktop/Master_Thesis/R_scripts/Patient_and_Visit_Separated.R", echo=TRUE)
ggplot(density_data, aes(x = Value, fill = Source, color = Source)) +
geom_density(alpha = 0.4, adjust = 1.2, na.rm = TRUE) +
facet_grid(Metabolite ~ Patient + Visit, scales = "free") +
labs(
title = "Density Distribution by Metabolite, Patient, and Visit",
x = "Metabolite Value",
y = "Density"
) +
theme_minimal() +
theme(
strip.text = element_text(size = 8),
legend.title = element_blank()
)
visit1_data <- density_data %>% filter(Visit == "v1")
unique_metabs <- unique(visit1_data$Metabolite)
for (metab in unique_metabs) {
p <- ggplot(visit1_data %>% filter(Metabolite == metab),
aes(x = Value, fill = Source, color = Source)) +
geom_density(alpha = 0.4, adjust = 1.2, na.rm = TRUE) +
facet_wrap(~ Patient, scales = "free") +
labs(
title = paste("Visit 1 -", metab),
x = "Value",
y = "Density"
) +
theme_minimal() +
theme(legend.title = element_blank())
print(p)
# Optional: save to file
# ggsave(paste0("visit1_", metab, ".png"), plot = p, width = 10, height = 6)
}
View(density_data)
# Get unique Patient-Visit combos
combo_list <- density_data %>%
distinct(Patient, Visit)
# Loop over each Patient + Visit combo
for (i in 1:nrow(combo_list)) {
patient <- combo_list$Patient[i]
visit <- combo_list$Visit[i]
df_subset <- density_data %>%
filter(Patient == patient, Visit == visit)
if (nrow(df_subset) == 0) next  # skip empty
p <- ggplot(df_subset, aes(x = Value, fill = Source, color = Source)) +
geom_density(alpha = 0.4, adjust = 1.2, na.rm = TRUE) +
facet_wrap(~ Metabolite, scales = "free") +
labs(
title = paste("Patient:", patient, "| Visit:", visit),
x = "Value",
y = "Density"
) +
theme_minimal() +
theme(
legend.title = element_blank(),
strip.text = element_text(size = 9)
)
print(p)
# Optional: save to file
# filename <- paste0("density_allmetabs_", patient, "_", visit, ".png")
# ggsave(filename, plot = p, width = 12, height = 6)
}
# Get unique Patient-Visit combos
combo_list <- density_data %>%
distinct(Patient, Visit)
# Loop over each Patient + Visit combo
for (i in 1:nrow(combo_list)) {
patient <- combo_list$Patient[i]
visit <- combo_list$Visit[i]
df_subset <- density_data %>%
filter(Patient == patient, Visit == visit)
if (nrow(df_subset) == 0) next  # skip empty
p <- ggplot(df_subset, aes(x = Value, fill = Source, color = Source)) +
geom_density(alpha = 0.4, adjust = 1.2, na.rm = TRUE) +
facet_wrap(~ Metabolite, scales = "free") +
labs(
title = paste("Patient:", patient, "| Visit:", visit),
x = "Value",
y = "Density"
) +
theme_minimal() +
theme(
legend.title = element_blank(),
strip.text = element_text(size = 9)
)
print(p)
#save to file
filename <- paste0("/Users/marcinebessire/Desktop/Master_Thesis/patient_vs_visit_mcar_", patient, "_", visit, ".png")
ggsave(filename, plot = p, width = 12, height = 6)
}
combo_list <- density_data %>%
distinct(Patient, Visit)
# Initialize plot list
plot_list <- list()
# Loop to generate plots and store them
for (i in 1:nrow(combo_list)) {
patient <- combo_list$Patient[i]
visit <- combo_list$Visit[i]
df_subset <- density_data %>%
filter(Patient == patient, Visit == visit)
if (nrow(df_subset) == 0) next
p <- ggplot(df_subset, aes(x = Value, fill = Source, color = Source)) +
geom_density(alpha = 0.4, adjust = 1.2, na.rm = TRUE) +
facet_wrap(~ Metabolite, scales = "free") +
labs(
title = paste("Patient:", patient, "| Visit:", visit),
x = "Value",
y = "Density"
) +
theme_minimal() +
theme(
legend.title = element_blank(),
strip.text = element_text(size = 9)
)
plot_list[[length(plot_list) + 1]] <- p
}
# Chunk and save every 20 plots into a PDF
chunks <- split(plot_list, ceiling(seq_along(plot_list) / 20))
for (i in seq_along(chunks)) {
pdf_name <- paste0("density_plots_batch_", i, ".pdf")
pdf(pdf_name, width = 12, height = 6)
walk(chunks[[i]], print)
dev.off()
}
#call function to prepare for plotting
density_data <- prepare_density_data(mcar_data, original_data)
#make density plot (whole FAO data for each patient)
ggplot(density_data, aes(x = Value, fill = Source, color = Source)) +
geom_density(alpha = 0.4, adjust = 1.2, na.rm = TRUE) +
facet_grid(Patient ~ Visit, scales = "free") +
labs(
title = "Density Distribution of Metabolite Values: MCAR vs Original",
x = "Metabolite Value",
y = "Density"
) +
theme_minimal() +
theme(
strip.text = element_text(face = "bold"),
legend.title = element_blank()
) +
xlim(-50,200)
combo_list <- density_data %>%
distinct(Patient, Visit)
# Initialize plot list
plot_list <- list()
# Loop to generate plots and store them
for (i in 1:nrow(combo_list)) {
patient <- combo_list$Patient[i]
visit <- combo_list$Visit[i]
df_subset <- density_data %>%
filter(Patient == patient, Visit == visit)
if (nrow(df_subset) == 0) next
p <- ggplot(df_subset, aes(x = Value, fill = Source, color = Source)) +
geom_density(alpha = 0.4, adjust = 1.2, na.rm = TRUE) +
facet_wrap(~ Metabolite, scales = "free") +
labs(
title = paste("Patient:", patient, "| Visit:", visit),
x = "Value",
y = "Density"
) +
theme_minimal() +
theme(
legend.title = element_blank(),
strip.text = element_text(size = 9)
)
plot_list[[length(plot_list) + 1]] <- p
}
# Chunk and save every 20 plots into a PDF
chunks <- split(plot_list, ceiling(seq_along(plot_list) / 20))
for (i in seq_along(chunks)) {
pdf_name <- paste0("/Users/marcinebessire/Desktop/Master_Thesis/density_mcar_orig_", i, ".pdf")
pdf(pdf_name, width = 12, height = 6)
walk(chunks[[i]], print)
dev.off()
}
# Set the output PDF path
pdf_path <- "/Users/marcinebessire/Desktop/Master_Thesis/Density_original_vs_mcar_all.pdf"
# Open the PDF device
pdf(pdf_path, width = 12, height = 6)
# Get unique Patient-Visit combinations
combo_list <- density_data %>%
distinct(Patient, Visit)
# Loop over each Patient + Visit combo and plot
for (i in 1:nrow(combo_list)) {
patient <- combo_list$Patient[i]
visit <- combo_list$Visit[i]
df_subset <- density_data %>%
filter(Patient == patient, Visit == visit)
if (nrow(df_subset) == 0) next  # skip if empty
p <- ggplot(df_subset, aes(x = Value, fill = Source, color = Source)) +
geom_density(alpha = 0.4, adjust = 1.2, na.rm = TRUE) +
facet_wrap(~ Metabolite, scales = "free") +
labs(
title = paste("Patient:", patient, "| Visit:", visit),
x = "Value",
y = "Density"
) +
theme_minimal() +
theme(
legend.title = element_blank(),
strip.text = element_text(size = 9)
)
print(p)  # adds the plot to the open PDF
}
# Close the PDF device
dev.off()
